-- Criar tabela para armazenar respostas individuais durante os testes
-- Esta tabela permite salvar respostas em tempo real conforme o usu√°rio responde

CREATE TABLE IF NOT EXISTS respostas_individuais (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    teste_id VARCHAR(255) NOT NULL,
    usuario_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    session_id VARCHAR(255) NOT NULL,
    pergunta_id VARCHAR(255) NOT NULL,
    resposta TEXT NOT NULL,
    pontuacao INTEGER,
    tempo_resposta INTEGER, -- em milissegundos
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- √çndices para otimizar consultas
CREATE INDEX IF NOT EXISTS idx_respostas_individuais_session 
ON respostas_individuais(session_id);

CREATE INDEX IF NOT EXISTS idx_respostas_individuais_teste 
ON respostas_individuais(teste_id);

CREATE INDEX IF NOT EXISTS idx_respostas_individuais_usuario 
ON respostas_individuais(usuario_id);

CREATE INDEX IF NOT EXISTS idx_respostas_individuais_pergunta 
ON respostas_individuais(pergunta_id);

CREATE INDEX IF NOT EXISTS idx_respostas_individuais_created 
ON respostas_individuais(created_at DESC);

-- Habilitar RLS (Row Level Security)
ALTER TABLE respostas_individuais ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para permitir inser√ß√£o de respostas (qualquer usu√°rio pode inserir)
CREATE POLICY "Inser√ß√£o de respostas individuais permitida" ON respostas_individuais
    FOR INSERT WITH CHECK (true);

-- Pol√≠tica para leitura de respostas (por usu√°rio ou sess√£o)
CREATE POLICY "Leitura por usu√°rio ou sess√£o" ON respostas_individuais
    FOR SELECT USING (
        usuario_id::text = auth.uid()::text OR 
        session_id = current_setting('app.session_id', true) OR
        usuario_id IS NULL
    );

-- Pol√≠tica para atualiza√ß√£o de respostas (apenas pr√≥prias respostas)
CREATE POLICY "Atualiza√ß√£o de respostas pr√≥prias" ON respostas_individuais
    FOR UPDATE USING (
        usuario_id::text = auth.uid()::text OR 
        session_id = current_setting('app.session_id', true) OR
        usuario_id IS NULL
    );

-- Pol√≠tica para exclus√£o de respostas (apenas pr√≥prias respostas)
CREATE POLICY "Exclus√£o de respostas pr√≥prias" ON respostas_individuais
    FOR DELETE USING (
        usuario_id::text = auth.uid()::text OR 
        session_id = current_setting('app.session_id', true) OR
        usuario_id IS NULL
    );

-- Trigger para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_respostas_individuais_updated_at 
    BEFORE UPDATE ON respostas_individuais 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Coment√°rios na tabela e colunas
COMMENT ON TABLE respostas_individuais IS 'Armazena respostas individuais dos usu√°rios durante os testes';
COMMENT ON COLUMN respostas_individuais.teste_id IS 'Identificador do teste';
COMMENT ON COLUMN respostas_individuais.usuario_id IS 'ID do usu√°rio autenticado (opcional)';
COMMENT ON COLUMN respostas_individuais.session_id IS 'ID da sess√£o para usu√°rios an√¥nimos';
COMMENT ON COLUMN respostas_individuais.pergunta_id IS 'Identificador da pergunta';
COMMENT ON COLUMN respostas_individuais.resposta IS 'Resposta do usu√°rio (texto)';
COMMENT ON COLUMN respostas_individuais.pontuacao IS 'Pontua√ß√£o num√©rica da resposta';
COMMENT ON COLUMN respostas_individuais.tempo_resposta IS 'Tempo gasto para responder em milissegundos';

-- Mensagem de conclus√£o
DO $$
BEGIN
    RAISE NOTICE '‚úÖ Tabela respostas_individuais criada com sucesso!';
    RAISE NOTICE 'üîç √çndices criados para otimiza√ß√£o';
    RAISE NOTICE 'üîí Pol√≠ticas RLS configuradas';
    RAISE NOTICE '‚ö° Trigger de updated_at configurado';
END $$;