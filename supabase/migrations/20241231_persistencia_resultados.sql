-- Migra√ß√£o para implementar persist√™ncia permanente de resultados
-- Adiciona campos necess√°rios para identifica√ß√£o por sess√£o e otimiza√ß√µes

-- 1. Adicionar campos para persist√™ncia por sess√£o
ALTER TABLE resultados 
ADD COLUMN IF NOT EXISTS session_id VARCHAR(255),
ADD COLUMN IF NOT EXISTS user_agent TEXT,
ADD COLUMN IF NOT EXISTS ip_address INET;

-- 2. Criar √≠ndices para otimizar consultas de hist√≥rico
CREATE INDEX IF NOT EXISTS idx_resultados_usuario_data 
ON resultados(usuario_id, data_realizacao DESC);

CREATE INDEX IF NOT EXISTS idx_resultados_session_data 
ON resultados(session_id, data_realizacao DESC);

CREATE INDEX IF NOT EXISTS idx_resultados_teste_data 
ON resultados(teste_id, data_realizacao DESC);

CREATE INDEX IF NOT EXISTS idx_resultados_status 
ON resultados(status);

CREATE INDEX IF NOT EXISTS idx_resultados_pontuacao 
ON resultados(pontuacao_total);

-- 3. Atualizar pol√≠ticas RLS para permitir acesso por sess√£o
DROP POLICY IF EXISTS "Usu√°rios podem ver seus resultados" ON resultados;

-- Pol√≠tica para leitura de resultados (por usu√°rio ou sess√£o)
CREATE POLICY "Acesso por usu√°rio ou sess√£o" ON resultados
    FOR SELECT USING (
        usuario_id::text = auth.uid()::text OR 
        session_id = current_setting('app.session_id', true) OR
        usuario_id IS NULL OR
        session_id IS NULL
    );

-- Pol√≠tica para inser√ß√£o de resultados (permitir qualquer inser√ß√£o)
DROP POLICY IF EXISTS "Qualquer um pode inserir resultados" ON resultados;
CREATE POLICY "Inser√ß√£o de resultados permitida" ON resultados
    FOR INSERT WITH CHECK (true);

-- Pol√≠tica para atualiza√ß√£o de resultados (apenas pr√≥prios resultados)
CREATE POLICY "Atualiza√ß√£o de resultados pr√≥prios" ON resultados
    FOR UPDATE USING (
        usuario_id::text = auth.uid()::text OR 
        session_id = current_setting('app.session_id', true) OR
        usuario_id IS NULL
    );

-- 4. Inserir dados dos testes existentes (apenas se n√£o existirem)
INSERT INTO testes (nome, descricao, categoria, tempo_estimado) 
SELECT 'HumaniQ Clima Organizacional', 'Avalia√ß√£o completa do clima organizacional', 'Organizacional', 25
WHERE NOT EXISTS (SELECT 1 FROM testes WHERE nome = 'HumaniQ Clima Organizacional')
UNION ALL
SELECT 'Modelo Karasek-Siegrist', 'Avalia√ß√£o de estresse ocupacional', 'Bem-estar', 20
WHERE NOT EXISTS (SELECT 1 FROM testes WHERE nome = 'Modelo Karasek-Siegrist')
UNION ALL
SELECT 'Percep√ß√£o de Ass√©dio (PAS)', 'Avalia√ß√£o de percep√ß√£o de ass√©dio moral e sexual', 'Seguran√ßa', 30
WHERE NOT EXISTS (SELECT 1 FROM testes WHERE nome = 'Percep√ß√£o de Ass√©dio (PAS)')
UNION ALL
SELECT 'Riscos Psicossociais Ocupacionais (RPO)', 'Identifica√ß√£o de riscos psicossociais no trabalho', 'Seguran√ßa', 35
WHERE NOT EXISTS (SELECT 1 FROM testes WHERE nome = 'Riscos Psicossociais Ocupacionais (RPO)')
UNION ALL
SELECT 'Qualidade de Vida no Trabalho (QVT)', 'Avalia√ß√£o da qualidade de vida no ambiente de trabalho', 'Bem-estar', 25
WHERE NOT EXISTS (SELECT 1 FROM testes WHERE nome = 'Qualidade de Vida no Trabalho (QVT)')
UNION ALL
SELECT 'Estresse Ocupacional', 'Avalia√ß√£o de n√≠veis de estresse no trabalho', 'Bem-estar', 20
WHERE NOT EXISTS (SELECT 1 FROM testes WHERE nome = 'Estresse Ocupacional')
UNION ALL
SELECT 'Clima e Bem-Estar', 'Avalia√ß√£o do clima e bem-estar organizacional', 'Organizacional', 30
WHERE NOT EXISTS (SELECT 1 FROM testes WHERE nome = 'Clima e Bem-Estar')
UNION ALL
SELECT 'MGRP - Modelo de Gest√£o de Riscos Psicossociais', 'Avalia√ß√£o completa de riscos psicossociais', 'Seguran√ßa', 40
WHERE NOT EXISTS (SELECT 1 FROM testes WHERE nome = 'MGRP - Modelo de Gest√£o de Riscos Psicossociais');

-- 5. Fun√ß√£o para limpeza de dados antigos (opcional - executar manualmente)
CREATE OR REPLACE FUNCTION cleanup_old_anonymous_results()
RETURNS void AS $$
BEGIN
    DELETE FROM resultados 
    WHERE usuario_id IS NULL 
    AND session_id IS NOT NULL 
    AND data_realizacao < NOW() - INTERVAL '90 days';
    
    RAISE NOTICE 'Limpeza conclu√≠da. Resultados an√¥nimos com mais de 90 dias foram removidos.';
END;
$$ LANGUAGE plpgsql;

-- 6. Fun√ß√£o para estat√≠sticas de uso (opcional)
CREATE OR REPLACE FUNCTION get_usage_statistics()
RETURNS TABLE(
    total_resultados BIGINT,
    resultados_anonimos BIGINT,
    resultados_identificados BIGINT,
    testes_mais_populares TEXT[]
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COUNT(*) as total_resultados,
        COUNT(*) FILTER (WHERE usuario_id IS NULL AND session_id IS NOT NULL) as resultados_anonimos,
        COUNT(*) FILTER (WHERE usuario_id IS NOT NULL) as resultados_identificados,
        ARRAY_AGG(DISTINCT teste_id ORDER BY teste_id) as testes_mais_populares
    FROM resultados
    WHERE data_realizacao >= NOW() - INTERVAL '30 days';
END;
$$ LANGUAGE plpgsql;

-- 7. Coment√°rios nas novas colunas
COMMENT ON COLUMN resultados.session_id IS 'Identificador √∫nico de sess√£o para usu√°rios an√¥nimos';
COMMENT ON COLUMN resultados.user_agent IS 'User agent do navegador para an√°lise de uso';
COMMENT ON COLUMN resultados.ip_address IS 'Endere√ßo IP do usu√°rio (opcional, para auditoria)';

-- 8. Verificar se as pol√≠ticas est√£o ativas
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
FROM pg_policies 
WHERE tablename = 'resultados';

-- Mensagem de conclus√£o
DO $$
BEGIN
    RAISE NOTICE '‚úÖ Migra√ß√£o de persist√™ncia de resultados conclu√≠da com sucesso!';
    RAISE NOTICE 'üìä Campos adicionados: session_id, user_agent, ip_address';
    RAISE NOTICE 'üîç √çndices criados para otimiza√ß√£o de consultas';
    RAISE NOTICE 'üîí Pol√≠ticas RLS atualizadas para suporte a sess√µes';
    RAISE NOTICE 'üìã Dados de testes atualizados';
END $$;