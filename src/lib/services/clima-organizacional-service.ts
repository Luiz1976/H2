// Servi√ßo para integra√ß√£o do teste de Clima Organizacional com o sistema
import { 
  calcularResultadoClimaOrganizacional, 
  dimensoesClimaOrganizacional,
  obterTodasPerguntas,
  infoTesteClimaOrganizacional,
  type ResultadoClimaOrganizacional 
} from '../testes/clima-organizacional';
import { resultadosService } from '../resultadosServiceNew';
import { sessionService } from './session-service';
import type { Resultado, AnaliseResultado } from '../types';

export class ClimaOrganizacionalService {
  
  /**
   * Processa as respostas do teste e salva no banco de dados
   */
  async processarResultado(
    respostas: Record<number, number>,
    usuarioNome?: string,
    usuarioEmail?: string,
    tempoGasto: number = 0,
    empresa_id?: string // Adicionar par√¢metro empresa_id
  ): Promise<{ resultado: Resultado; analise: ResultadoClimaOrganizacional }> {
    
    try {
      console.log('üîç [CLIMA-SERVICE] Iniciando processamento do resultado');
      console.log('üîç [CLIMA-SERVICE] Respostas recebidas:', respostas);
      console.log('üîç [CLIMA-SERVICE] N√∫mero de respostas:', Object.keys(respostas).length);
      
      // Calcular resultado usando a fun√ß√£o espec√≠fica do teste
      console.log('üîç [CLIMA-SERVICE] Calculando resultado...');
      const analiseClima = calcularResultadoClimaOrganizacional(respostas);
      console.log('üîç [CLIMA-SERVICE] An√°lise calculada:', analiseClima);
      
      // Converter para o formato do banco de dados
      console.log('üîç [CLIMA-SERVICE] Convertendo pontua√ß√µes das dimens√µes...');
      const pontuacoesDimensoes: Record<string, number> = {};
      Object.entries(analiseClima.dimensoes).forEach(([dimensaoId, dados]) => {
        pontuacoesDimensoes[dimensaoId] = dados.media;
      });
      console.log('üîç [CLIMA-SERVICE] Pontua√ß√µes das dimens√µes:', pontuacoesDimensoes);
      
      // Gerar interpreta√ß√£o textual
      console.log('üîç [CLIMA-SERVICE] Gerando interpreta√ß√£o...');
      const interpretacao = this.gerarInterpretacao(analiseClima);
      console.log('üîç [CLIMA-SERVICE] Interpreta√ß√£o gerada:', interpretacao.substring(0, 100) + '...');
      
      // Gerar recomenda√ß√µes
      console.log('üîç [CLIMA-SERVICE] Gerando recomenda√ß√µes...');
      const recomendacoes = this.gerarRecomendacoes(analiseClima);
      console.log('üîç [CLIMA-SERVICE] Recomenda√ß√µes geradas:', recomendacoes.length, 'itens');
      
      // Obter session_id para persist√™ncia
      const sessionId = sessionService.getSessionId();
      console.log('üîç [CLIMA-SERVICE] Session ID obtido:', sessionId);
      
      // Preparar dados para salvar no banco (compat√≠vel com schema)
      const dadosResultado = {
        teste_id: null, // NULL para testes que n√£o est√£o na tabela testes (como clima-organizacional)
        usuario_id: usuarioEmail ? crypto.randomUUID() : null, // NULL para an√¥nimos conforme schema
        session_id: sessionId, // Incluir session_id para persist√™ncia
        pontuacao_total: analiseClima.pontuacaoGeral, // Usar pontua√ß√£o total calculada (soma das respostas)
        tempo_gasto: tempoGasto, // Campo correto conforme schema
        status: 'concluido' as const,
        metadados: {
          tipo_teste: 'clima-organizacional', // Identificar o tipo no metadados
          teste_nome: infoTesteClimaOrganizacional.nome,
          usuario_nome: usuarioNome || 'An√¥nimo',
          usuario_email: usuarioEmail || null,
          empresa_id: empresa_id || null, // Adicionar empresa_id aos metadados
          pontuacoes_dimensoes: pontuacoesDimensoes,
          interpretacao,
          recomendacoes,
          analise_completa: analiseClima,
          versao_teste: '1.0',
          timestamp_processamento: new Date().toISOString()
        }
      };
      
      console.log('üîç [CLIMA-SERVICE] Dados preparados para salvar:', dadosResultado);
      console.log('üîç [CLIMA-SERVICE] Chamando resultadosService.salvarResultado...');
      
      try {
        // Salvar no banco de dados
        console.log('üîç [CLIMA-SERVICE] Tentando salvar resultado...');
        const resultadoSalvo = await resultadosService.salvarResultado(dadosResultado);
        console.log('üîç [CLIMA-SERVICE] Resultado salvo com sucesso:', resultadoSalvo);
        
        if (!resultadoSalvo) {
          console.error('‚ùå [CLIMA-SERVICE] Resultado salvo √© nulo ou indefinido');
          throw new Error('Falha ao salvar resultado: retorno nulo do banco de dados');
        }
        
        // Verificar se o objeto tem a propriedade 'id'
        if (!resultadoSalvo.id) {
          console.error('‚ùå [CLIMA-SERVICE] Resultado salvo n√£o cont√©m ID v√°lido:', resultadoSalvo);
          throw new Error('Falha ao salvar resultado: ID n√£o encontrado no retorno');
        }
        
        console.log('üîç [CLIMA-SERVICE] ID do resultado salvo:', resultadoSalvo.id);
        
        return {
          resultado: resultadoSalvo,
          analise: analiseClima
        };
        
      } catch (saveError) {
        console.error('‚ùå [CLIMA-SERVICE] Erro espec√≠fico ao salvar:', saveError);
        console.error('‚ùå [CLIMA-SERVICE] Tipo do erro de salvamento:', typeof saveError);
        console.error('‚ùå [CLIMA-SERVICE] Nome do erro de salvamento:', saveError instanceof Error ? saveError.name : 'Unknown');
        console.error('‚ùå [CLIMA-SERVICE] Mensagem do erro de salvamento:', saveError instanceof Error ? saveError.message : String(saveError));
        console.error('‚ùå [CLIMA-SERVICE] Stack trace do salvamento:', saveError instanceof Error ? saveError.stack : 'No stack trace');
        throw saveError;
      }
      
    } catch (error) {
      console.error('‚ùå [CLIMA-SERVICE] Erro no processamento:', error);
      console.error('‚ùå [CLIMA-SERVICE] Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
      throw error;
    }
  }
  
  /**
   * Gera interpreta√ß√£o textual do resultado
   */
  private gerarInterpretacao(analise: ResultadoClimaOrganizacional): string {
    const { mediaGeral, classificacaoGeral, nivelGeral } = analise;
    
    let interpretacao = `Seu resultado geral de Clima Organizacional foi de ${mediaGeral.toFixed(2)} pontos, classificado como "${classificacaoGeral}". `;
    
    // An√°lise por n√≠vel
    switch (nivelGeral) {
      case 'excelente':
        interpretacao += "Parab√©ns! Voc√™ percebe o ambiente organizacional de forma muito positiva, indicando alta satisfa√ß√£o e engajamento com a empresa.";
        break;
      case 'bom':
        interpretacao += "Voc√™ tem uma percep√ß√£o positiva do ambiente organizacional, com bons n√≠veis de satisfa√ß√£o e algumas oportunidades de melhoria.";
        break;
      case 'regular':
        interpretacao += "Sua percep√ß√£o do clima organizacional √© neutra, indicando que h√° aspectos positivos e negativos equilibrados no ambiente de trabalho.";
        break;
      case 'ruim':
        interpretacao += "Voc√™ percebe alguns desafios significativos no ambiente organizacional que podem estar impactando sua satisfa√ß√£o e produtividade.";
        break;
      case 'critico':
        interpretacao += "Sua percep√ß√£o indica s√©rios problemas no clima organizacional que requerem aten√ß√£o imediata da gest√£o.";
        break;
    }
    
    // Destacar dimens√µes mais fortes e mais fracas
    const dimensoesOrdenadas = Object.entries(analise.dimensoes)
      .sort(([,a], [,b]) => b.media - a.media);
    
    if (dimensoesOrdenadas.length > 0) {
      const melhorDimensao = dimensoesOrdenadas[0];
      const piorDimensao = dimensoesOrdenadas[dimensoesOrdenadas.length - 1];
      
      const nomeMelhor = dimensoesClimaOrganizacional.find(d => d.id === melhorDimensao[0])?.nome;
      const nomePior = dimensoesClimaOrganizacional.find(d => d.id === piorDimensao[0])?.nome;
      
      interpretacao += ` Sua dimens√£o mais forte √© "${nomeMelhor}" (${melhorDimensao[1].media.toFixed(2)} pontos), enquanto "${nomePior}" apresenta maior oportunidade de melhoria (${piorDimensao[1].media.toFixed(2)} pontos).`;
    }
    
    return interpretacao;
  }
  
  /**
   * Gera recomenda√ß√µes baseadas no resultado
   */
  private gerarRecomendacoes(analise: ResultadoClimaOrganizacional): string[] {
    const recomendacoes: string[] = [];
    
    // Recomenda√ß√µes baseadas no n√≠vel geral
    switch (analise.nivelGeral) {
      case 'excelente':
        recomendacoes.push("Continue mantendo essa percep√ß√£o positiva e seja um agente de mudan√ßa positiva para seus colegas");
        recomendacoes.push("Considere compartilhar suas experi√™ncias positivas com a lideran√ßa para replicar boas pr√°ticas");
        break;
      case 'bom':
        recomendacoes.push("Identifique oportunidades espec√≠ficas de melhoria e dialogue com sua lideran√ßa sobre elas");
        recomendacoes.push("Mantenha o engajamento e contribua ativamente para melhorar o ambiente de trabalho");
        break;
      case 'regular':
        recomendacoes.push("Reflita sobre os aspectos que mais impactam sua satisfa√ß√£o no trabalho");
        recomendacoes.push("Busque feedback da lideran√ßa e colegas para entender diferentes perspectivas");
        break;
      case 'ruim':
        recomendacoes.push("Converse com sua lideran√ßa sobre os principais desafios identificados");
        recomendacoes.push("Considere buscar apoio de RH ou canais internos de comunica√ß√£o");
        break;
      case 'critico':
        recomendacoes.push("√â importante comunicar suas preocupa√ß√µes √† lideran√ßa ou RH imediatamente");
        recomendacoes.push("Considere buscar apoio profissional se o ambiente estiver afetando seu bem-estar");
        break;
    }
    
    // Recomenda√ß√µes espec√≠ficas por dimens√£o com baixa pontua√ß√£o
    Object.entries(analise.dimensoes).forEach(([dimensaoId, dados]) => {
      if (dados.nivel === 'ruim' || dados.nivel === 'critico') {
        const dimensao = dimensoesClimaOrganizacional.find(d => d.id === dimensaoId);
        if (dimensao) {
          switch (dimensaoId) {
            case 'comunicacao':
              recomendacoes.push("Busque canais alternativos de comunica√ß√£o e solicite clarifica√ß√µes quando necess√°rio");
              break;
            case 'lideranca':
              recomendacoes.push("Agende conversas individuais com sua lideran√ßa para melhorar o relacionamento");
              break;
            case 'relacionamento':
              recomendacoes.push("Invista em construir relacionamentos mais pr√≥ximos com colegas de trabalho");
              break;
            case 'reconhecimento':
              recomendacoes.push("Documente suas conquistas e comunique seus resultados √† lideran√ßa");
              break;
            case 'desenvolvimento':
              recomendacoes.push("Procure oportunidades de capacita√ß√£o e converse sobre seu plano de carreira");
              break;
            case 'condicoes':
              recomendacoes.push("Reporte problemas de infraestrutura e solicite melhorias nas condi√ß√µes de trabalho");
              break;
            case 'equilibrio':
              recomendacoes.push("Estabele√ßa limites claros entre trabalho e vida pessoal e comunique suas necessidades");
              break;
            case 'engajamento':
              recomendacoes.push("Reflita sobre seus valores e objetivos profissionais e busque alinhamento com a empresa");
              break;
          }
        }
      }
    });
    
    // Garantir que sempre h√° pelo menos algumas recomenda√ß√µes
    if (recomendacoes.length === 0) {
      recomendacoes.push("Continue monitorando sua percep√ß√£o do ambiente de trabalho");
      recomendacoes.push("Mantenha di√°logo aberto com lideran√ßa e colegas");
      recomendacoes.push("Busque oportunidades de contribuir para melhorias organizacionais");
    }
    
    return recomendacoes.slice(0, 6); // Limitar a 6 recomenda√ß√µes
  }
  
  /**
   * Converte resultado do clima organizacional para AnaliseResultado (compatibilidade)
   */
  converterParaAnaliseResultado(analise: ResultadoClimaOrganizacional): AnaliseResultado {
    const dimensoes: Record<string, { pontuacao: number; percentil: number; interpretacao: string }> = {};
    
    Object.entries(analise.dimensoes).forEach(([dimensaoId, dados]) => {
      const dimensao = dimensoesClimaOrganizacional.find(d => d.id === dimensaoId);
      dimensoes[dimensaoId] = {
        pontuacao: dados.pontuacao,
        percentil: Math.round((dados.media / 5) * 100),
        interpretacao: `${dimensao?.nome}: ${dados.classificacao}`
      };
    });
    
    return {
      dimensoes,
      pontuacao_geral: analise.pontuacaoGeral,
      nivel: this.converterNivelParaAnalise(analise.nivelGeral),
      pontos_fortes: this.identificarPontosFortes(analise),
      areas_desenvolvimento: this.identificarAreasDesenvolvimento(analise)
    };
  }
  
  private converterNivelParaAnalise(nivel: string): 'baixo' | 'medio' | 'alto' {
    switch (nivel) {
      case 'critico':
      case 'ruim':
        return 'baixo';
      case 'regular':
        return 'medio';
      case 'bom':
      case 'excelente':
        return 'alto';
      default:
        return 'medio';
    }
  }
  
  private identificarPontosFortes(analise: ResultadoClimaOrganizacional): string[] {
    return Object.entries(analise.dimensoes)
      .filter(([, dados]) => dados.nivel === 'bom' || dados.nivel === 'excelente')
      .map(([dimensaoId]) => {
        const dimensao = dimensoesClimaOrganizacional.find(d => d.id === dimensaoId);
        return dimensao?.nome || dimensaoId;
      })
      .slice(0, 3);
  }
  
  private identificarAreasDesenvolvimento(analise: ResultadoClimaOrganizacional): string[] {
    return Object.entries(analise.dimensoes)
      .filter(([, dados]) => dados.nivel === 'ruim' || dados.nivel === 'critico' || dados.nivel === 'regular')
      .sort(([,a], [,b]) => a.media - b.media)
      .map(([dimensaoId]) => {
        const dimensao = dimensoesClimaOrganizacional.find(d => d.id === dimensaoId);
        return dimensao?.nome || dimensaoId;
      })
      .slice(0, 3);
  }
}

// Inst√¢ncia singleton do servi√ßo
export const climaOrganizacionalService = new ClimaOrganizacionalService();