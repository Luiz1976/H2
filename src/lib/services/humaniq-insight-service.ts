import { 
  calcularResultadoHumaniQInsight, 
  ResultadoHumaniQInsight,
  dimensoesHumaniQInsight,
  classificacaoMedia
} from '@/lib/testes/humaniq-insight';
import { resultadosService } from '@/lib/resultadosServiceNew';
import { sessionService } from './session-service';

export interface Resultado {
  id: string;
  teste_id: string | null;
  usuario_id: string | null;
  session_id: string;
  pontuacao_total: number;
  tempo_gasto: number;
  status: string;
  metadados: any;
  data_realizacao: Date;
}

class HumaniQInsightService {
  
  /**
   * Processa as respostas do teste e salva no banco de dados
   */
  async processarResultado(
    respostas: Record<number, number>,
    usuarioNome?: string,
    usuarioEmail?: string,
    tempoGasto: number = 0,
    testeId?: string // Adicionar o par√¢metro testeId
  ): Promise<{ resultado: Resultado; analise: ResultadoHumaniQInsight }> {
    
    try {
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Iniciando processamento do resultado');
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Teste ID recebido:', testeId);
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Respostas recebidas:', respostas);
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] N√∫mero de respostas:', Object.keys(respostas).length);
      
      // Calcular resultado usando a fun√ß√£o espec√≠fica do teste
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Calculando resultado...');
      const analiseHumaniQInsight = calcularResultadoHumaniQInsight(respostas);
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] An√°lise calculada:', analiseHumaniQInsight);
      
      // Converter para o formato do banco de dados
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Convertendo pontua√ß√µes das dimens√µes...');
      const pontuacoesDimensoes: Record<string, number> = {};
      Object.entries(analiseHumaniQInsight.dimensoes).forEach(([dimensaoId, dados]) => {
        pontuacoesDimensoes[dimensaoId] = dados.media;
      });
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Pontua√ß√µes das dimens√µes:', pontuacoesDimensoes);
      
      // Gerar interpreta√ß√£o textual
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Gerando interpreta√ß√£o...');
      const interpretacao = this.gerarInterpretacao(analiseHumaniQInsight);
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Interpreta√ß√£o gerada:', interpretacao.substring(0, 100) + '...');
      
      // Gerar recomenda√ß√µes
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Gerando recomenda√ß√µes...');
      const recomendacoes = this.gerarRecomendacoes(analiseHumaniQInsight);
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Recomenda√ß√µes geradas:', recomendacoes.length, 'itens');
      
      // Obter session_id para persist√™ncia
      const sessionId = sessionService.getSessionId();
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Session ID obtido:', sessionId);
      
      // Preparar dados para salvar no banco
      const dadosResultado = {
        teste_id: testeId || null, // Usar o testeId passado ou null
        usuario_id: usuarioEmail ? crypto.randomUUID() : null,
        session_id: sessionId,
        pontuacao_total: analiseHumaniQInsight.pontuacaoGeral,
        tempo_gasto: tempoGasto,
        status: 'concluido',
        user_email: usuarioEmail,
        empresa_id: empresa_id || null,
        metadados: {
          teste_nome: 'HumaniQ Insight',
          tipo_teste: 'humaniq-insight',
          usuario_nome: usuarioNome,
          usuario_email: usuarioEmail,
          pontuacoes_dimensoes: pontuacoesDimensoes,
          analise_completa: analiseHumaniQInsight,
          interpretacao: interpretacao,
          recomendacoes: recomendacoes,
          versao_teste: '1.0',
          data_calculo: new Date().toISOString()
        }
      };
      
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Dados preparados para salvamento:', {
        session_id: dadosResultado.session_id,
        pontuacao_total: dadosResultado.pontuacao_total,
        status: dadosResultado.status,
        metadados_keys: Object.keys(dadosResultado.metadados)
      });
      
      // Salvar no banco de dados
      console.log('üîç [HUMANIQ-INSIGHT-SERVICE] Salvando resultado no banco...');
      const resultadoSalvo = await resultadosService.salvarResultado(dadosResultado);
      console.log('‚úÖ [HUMANIQ-INSIGHT-SERVICE] Resultado salvo com sucesso:', resultadoSalvo);
      
      return {
        resultado: resultadoSalvo as unknown as Resultado,
        analise: analiseHumaniQInsight
      };
      
    } catch (error) {
      console.error('‚ùå [HUMANIQ-INSIGHT-SERVICE] Erro no processamento:', error);
      console.error('‚ùå [HUMANIQ-INSIGHT-SERVICE] Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
      throw error;
    }
  }
  
  /**
   * Gera interpreta√ß√£o textual do resultado
   */
  private gerarInterpretacao(analise: ResultadoHumaniQInsight): string {
    const { mediaGeral, nivelGeral, dimensoes } = analise;
    
    let interpretacao = `## An√°lise HumaniQ Insight\n\n`;
    interpretacao += `**Pontua√ß√£o Geral:** ${mediaGeral.toFixed(2)}/5.00\n`;
    interpretacao += `**Classifica√ß√£o:** ${classificacaoMedia[nivelGeral].label}\n\n`;
    
    interpretacao += `### Vis√£o Geral\n\n`;
    
    if (nivelGeral === 'saudavel') {
      interpretacao += `Sua organiza√ß√£o apresenta um clima organizacional **positivo e saud√°vel**. `;
      interpretacao += `O ambiente de trabalho demonstra bons n√≠veis de seguran√ßa psicol√≥gica, comunica√ß√£o, pertencimento e justi√ßa organizacional. `;
      interpretacao += `Isso favorece o bem-estar, a motiva√ß√£o e o engajamento dos colaboradores.\n\n`;
    } else if (nivelGeral === 'moderado') {
      interpretacao += `Sua organiza√ß√£o apresenta um clima organizacional **moderado**. `;
      interpretacao += `Existem aspectos positivos, mas tamb√©m oportunidades significativas de melhoria em √°reas como seguran√ßa psicol√≥gica, `;
      interpretacao += `comunica√ß√£o interna, pertencimento e justi√ßa organizacional.\n\n`;
    } else {
      interpretacao += `Sua organiza√ß√£o apresenta um clima organizacional **problem√°tico** que requer aten√ß√£o urgente. `;
      interpretacao += `Os resultados indicam desafios significativos que podem estar impactando negativamente o bem-estar, `;
      interpretacao += `a motiva√ß√£o e o engajamento dos colaboradores.\n\n`;
    }
    
    interpretacao += `### An√°lise por Dimens√£o\n\n`;
    
    Object.entries(dimensoes).forEach(([dimensaoId, dados]) => {
      const dimensaoInfo = dimensoesHumaniQInsight.find(d => d.id === dimensaoId);
      if (dimensaoInfo) {
        interpretacao += `**${dimensaoInfo.nome}:** ${dados.media.toFixed(2)}/5.00 - ${dados.classificacao}\n`;
        interpretacao += `*${dimensaoInfo.descricao}*\n\n`;
      }
    });
    
    return interpretacao;
  }
  
  /**
   * Gera recomenda√ß√µes espec√≠ficas baseadas no resultado
   */
  private gerarRecomendacoes(analise: ResultadoHumaniQInsight): string[] {
    const recomendacoes: string[] = [];
    const { dimensoes } = analise;
    
    // Recomenda√ß√µes por dimens√£o
    Object.entries(dimensoes).forEach(([dimensaoId, dados]) => {
      const dimensaoInfo = dimensoesHumaniQInsight.find(d => d.id === dimensaoId);
      
      if (dimensaoInfo && dados.nivel === 'problematico') {
        if (dimensaoId === 'seguranca-psicologica') {
          recomendacoes.push('Promover treinamentos sobre seguran√ßa psicol√≥gica para l√≠deres e equipes');
          recomendacoes.push('Criar canais seguros e an√¥nimos para compartilhamento de ideias e preocupa√ß√µes');
          recomendacoes.push('Estabelecer cultura de aprendizado com erros, sem puni√ß√µes');
        } else if (dimensaoId === 'comunicacao-interna') {
          recomendacoes.push('Implementar canais de comunica√ß√£o mais claros e acess√≠veis');
          recomendacoes.push('Estabelecer reuni√µes regulares de feedback e alinhamento');
          recomendacoes.push('Treinar lideran√ßas em comunica√ß√£o emp√°tica e transparente');
        } else if (dimensaoId === 'pertencimento') {
          recomendacoes.push('Desenvolver programas de integra√ß√£o e valoriza√ß√£o da diversidade');
          recomendacoes.push('Promover eventos e atividades que fortale√ßam o esp√≠rito de equipe');
          recomendacoes.push('Criar pr√°ticas de reconhecimento e celebra√ß√£o de conquistas');
        } else if (dimensaoId === 'justica-organizacional') {
          recomendacoes.push('Revisar e comunicar claramente pol√≠ticas e procedimentos organizacionais');
          recomendacoes.push('Implementar processos transparentes de avalia√ß√£o e reconhecimento');
          recomendacoes.push('Estabelecer mecanismos justos e eficazes de resolu√ß√£o de conflitos');
        }
      }
    });
    
    // Recomenda√ß√µes gerais
    if (analise.nivelGeral === 'problematico') {
      recomendacoes.push('Realizar diagn√≥stico detalhado com grupos focais e entrevistas');
      recomendacoes.push('Desenvolver plano de a√ß√£o priorit√°rio com metas mensur√°veis');
      recomendacoes.push('Considerar apoio de consultoria especializada em clima organizacional');
    } else if (analise.nivelGeral === 'moderado') {
      recomendacoes.push('Focar nas dimens√µes com menor pontua√ß√£o para melhorias direcionadas');
      recomendacoes.push('Manter a√ß√µes preventivas nas √°reas j√° positivas');
      recomendacoes.push('Estabelecer indicadores de acompanhamento cont√≠nuo');
    } else {
      recomendacoes.push('Manter pr√°ticas que sustentam o clima positivo');
      recomendacoes.push('Compartilhar boas pr√°ticas com outras √°reas ou unidades');
      recomendacoes.push('Realizar avalia√ß√µes peri√≥dicas para monitoramento cont√≠nuo');
    }
    
    return recomendacoes;
  }
}

export const humaniQInsightService = new HumaniQInsightService();
