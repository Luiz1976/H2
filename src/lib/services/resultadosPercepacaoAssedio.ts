// Servi√ßo para gerenciar resultados do teste de Percep√ß√£o de Ass√©dio Moral e Sexual
import { 
  calcularResultadoPercepacaoAssedio, 
  configPercepacaoAssedio,
  type ResultadoPercepacaoAssedio 
} from '../testes/percepcao-assedio';
import { resultadosService } from '../database';
import { sessionService } from './session-service';
import type { Resultado, AnaliseResultado } from '../types';

export class ResultadosPercepacaoAssedioService {
  
  /**
   * Salva uma resposta individual do teste
   */
  async salvarRespostaPercepacaoAssedio(
    perguntaId: number,
    resposta: number,
    sessionId?: string
  ): Promise<void> {
    try {
      console.log('üíæ [PAS-RESULTADOS] Salvando resposta individual:', { perguntaId, resposta });
      
      const session = sessionId || sessionService.getSessionId();
      
      // Aqui voc√™ pode implementar salvamento de respostas individuais se necess√°rio
      // Por enquanto, apenas logamos para debug
      console.log('üíæ [PAS-RESULTADOS] Resposta salva para sess√£o:', session);
      
    } catch (error) {
      console.error('‚ùå [PAS-RESULTADOS] Erro ao salvar resposta individual:', error);
      throw error;
    }
  }

  /**
   * Finaliza o teste e processa o resultado completo
   */
  async finalizarTestePercepacaoAssedio(
    respostas: Record<number, number>,
    usuarioNome?: string,
    usuarioEmail?: string,
    tempoGasto: number = 0
  ): Promise<{ resultado: Resultado; analise: ResultadoPercepacaoAssedio }> {
    
    try {
      console.log('üîç [PAS-RESULTADOS] Iniciando processamento do resultado');
      console.log('üîç [PAS-RESULTADOS] Respostas recebidas:', respostas);
      console.log('üîç [PAS-RESULTADOS] N√∫mero de respostas:', Object.keys(respostas).length);
      
      // Calcular resultado usando a fun√ß√£o espec√≠fica do teste
      console.log('üîç [PAS-RESULTADOS] Calculando resultado...');
      const analisePAS = calcularResultadoPercepacaoAssedio(respostas);
      console.log('üîç [PAS-RESULTADOS] An√°lise calculada:', analisePAS);
      
      // Converter para o formato do banco de dados
      console.log('üîç [PAS-RESULTADOS] Convertendo pontua√ß√µes das dimens√µes...');
      const pontuacoesDimensoes: Record<string, number> = {};
      analisePAS.dimensoes.forEach(dimensao => {
        pontuacoesDimensoes[dimensao.nome] = dimensao.pontuacao;
      });
      console.log('üîç [PAS-RESULTADOS] Pontua√ß√µes das dimens√µes:', pontuacoesDimensoes);
      
      // Gerar interpreta√ß√£o textual
      console.log('üîç [PAS-RESULTADOS] Gerando interpreta√ß√£o...');
      const interpretacao = this.gerarInterpretacao(analisePAS);
      console.log('üîç [PAS-RESULTADOS] Interpreta√ß√£o gerada:', interpretacao.substring(0, 100) + '...');
      
      // Gerar recomenda√ß√µes
      console.log('üîç [PAS-RESULTADOS] Gerando recomenda√ß√µes...');
      const recomendacoes = this.gerarRecomendacoes(analisePAS);
      console.log('üîç [PAS-RESULTADOS] Recomenda√ß√µes geradas:', recomendacoes.length, 'itens');
      
      // Obter session_id para persist√™ncia
      const sessionId = sessionService.getSessionId();
      console.log('üîç [PAS-RESULTADOS] Session ID obtido:', sessionId);
      
      // Preparar dados para salvar no banco (compat√≠vel com schema)
      const dadosResultado = {
        teste_id: null, // NULL para testes que n√£o est√£o na tabela testes
        usuario_id: usuarioEmail ? crypto.randomUUID() : null, // NULL para an√¥nimos
        session_id: sessionId,
        pontuacao_total: Math.round(analisePAS.percentualGeral), // Usar percentual geral como pontua√ß√£o total
        tempo_gasto: tempoGasto,
        status: 'concluido' as const,
        metadados: {
          tipo_teste: 'percepcao-assedio',
          teste_nome: configPercepacaoAssedio.nome,
          usuario_nome: usuarioNome || 'An√¥nimo',
          usuario_email: usuarioEmail || null,
          pontuacoes_dimensoes: pontuacoesDimensoes,
          interpretacao,
          recomendacoes,
          analise_completa: analisePAS,
          versao_teste: '1.0',
          timestamp_processamento: new Date().toISOString()
        }
      };
      
      console.log('üîç [PAS-RESULTADOS] Dados preparados para salvar:', dadosResultado);
      console.log('üîç [PAS-RESULTADOS] Chamando resultadosService.salvarResultado...');
      
      try {
        // Salvar no banco de dados
        console.log('üîç [PAS-RESULTADOS] Tentando salvar resultado...');
        const resultadoSalvo = await resultadosService.salvarResultado(dadosResultado);
        console.log('üîç [PAS-RESULTADOS] Resultado salvo com sucesso:', resultadoSalvo);
        console.log('üîç [PAS-RESULTADOS] ID do resultado salvo:', resultadoSalvo.id);
        
        return {
          resultado: resultadoSalvo,
          analise: analisePAS
        };
        
      } catch (saveError) {
        console.error('‚ùå [PAS-RESULTADOS] Erro espec√≠fico ao salvar:', saveError);
        console.error('‚ùå [PAS-RESULTADOS] Tipo do erro de salvamento:', typeof saveError);
        console.error('‚ùå [PAS-RESULTADOS] Nome do erro de salvamento:', saveError instanceof Error ? saveError.name : 'Unknown');
        console.error('‚ùå [PAS-RESULTADOS] Mensagem do erro de salvamento:', saveError instanceof Error ? saveError.message : String(saveError));
        console.error('‚ùå [PAS-RESULTADOS] Stack trace do salvamento:', saveError instanceof Error ? saveError.stack : 'No stack trace');
        throw saveError;
      }
      
    } catch (error) {
      console.error('‚ùå [PAS-RESULTADOS] Erro no processamento:', error);
      console.error('‚ùå [PAS-RESULTADOS] Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
      throw error;
    }
  }
  
  /**
   * Gera interpreta√ß√£o textual do resultado
   */
  private gerarInterpretacao(analise: ResultadoPercepacaoAssedio): string {
    const { percentualGeral, nivelRiscoGeral, classificacaoGeral } = analise;
    
    let interpretacao = `Seu resultado no teste de Percep√ß√£o de Ass√©dio foi de ${percentualGeral.toFixed(1)}%, classificado como "${classificacaoGeral}". `;
    
    // An√°lise por n√≠vel de risco
    switch (nivelRiscoGeral) {
      case 'Baixo Risco':
        interpretacao += "Excelente! Voc√™ percebe um ambiente de trabalho seguro e respeitoso, com baixos n√≠veis de condutas abusivas.";
        break;
      case 'Risco Moderado':
        interpretacao += "Voc√™ percebe alguns sinais de condutas inadequadas no ambiente de trabalho que merecem aten√ß√£o.";
        break;
      case 'Alto Risco':
        interpretacao += "Voc√™ est√° percebendo n√≠veis preocupantes de condutas abusivas que podem estar impactando o bem-estar no trabalho.";
        break;
      case 'Risco Cr√≠tico':
        interpretacao += "Aten√ß√£o! Voc√™ est√° percebendo n√≠veis cr√≠ticos de ass√©dio que requerem interven√ß√£o imediata.";
        break;
    }
    
    // Destacar dimens√µes mais cr√≠ticas
    const dimensoesCriticas = analise.dimensoes.filter(d => d.alertaCritico);
    if (dimensoesCriticas.length > 0) {
      interpretacao += ` As √°reas que requerem maior aten√ß√£o s√£o: ${dimensoesCriticas.map(d => d.nome).join(', ')}.`;
    }
    
    return interpretacao;
  }
  
  /**
   * Gera recomenda√ß√µes baseadas no resultado
   */
  private gerarRecomendacoes(analise: ResultadoPercepacaoAssedio): string[] {
    const recomendacoes: string[] = [];
    
    // Recomenda√ß√µes gerais baseadas no n√≠vel de risco
    switch (analise.nivelRiscoGeral) {
      case 'Baixo Risco':
        recomendacoes.push('Mantenha as boas pr√°ticas de ambiente respeitoso');
        recomendacoes.push('Continue promovendo a cultura de respeito e inclus√£o');
        break;
      case 'Risco Moderado':
        recomendacoes.push('Reforce os canais de comunica√ß√£o e den√∫ncia');
        recomendacoes.push('Implemente treinamentos preventivos regulares');
        break;
      case 'Alto Risco':
        recomendacoes.push('Busque apoio dos canais de den√∫ncia dispon√≠veis');
        recomendacoes.push('Documente situa√ß√µes inadequadas quando poss√≠vel');
        break;
      case 'Risco Cr√≠tico':
        recomendacoes.push('Procure apoio imediato atrav√©s dos canais oficiais');
        recomendacoes.push('Considere buscar suporte psicol√≥gico especializado');
        break;
    }
    
    // Recomenda√ß√µes espec√≠ficas por dimens√£o
    analise.dimensoes.forEach(dimensao => {
      if (dimensao.alertaCritico) {
        recomendacoes.push(...dimensao.recomendacoes);
      }
    });
    
    // Adicionar recomenda√ß√µes educativas e disciplinares do resultado
    recomendacoes.push(...analise.recomendacoesEducativas);
    if (analise.nivelRiscoGeral === 'Alto Risco' || analise.nivelRiscoGeral === 'Risco Cr√≠tico') {
      recomendacoes.push(...analise.recomendacoesDisciplinares);
    }
    
    return [...new Set(recomendacoes)]; // Remove duplicatas
  }
}

// Inst√¢ncia singleton do servi√ßo
export const resultadosPercepacaoAssedioService = new ResultadosPercepacaoAssedioService();

// Fun√ß√µes exportadas para compatibilidade com imports existentes
export const salvarRespostaPercepacaoAssedio = (
  perguntaId: number,
  resposta: number,
  sessionId?: string
) => resultadosPercepacaoAssedioService.salvarRespostaPercepacaoAssedio(perguntaId, resposta, sessionId);

export const finalizarTestePercepacaoAssedio = (
  respostas: Record<number, number>,
  usuarioNome?: string,
  usuarioEmail?: string,
  tempoGasto?: number
) => resultadosPercepacaoAssedioService.finalizarTestePercepacaoAssedio(respostas, usuarioNome, usuarioEmail, tempoGasto);